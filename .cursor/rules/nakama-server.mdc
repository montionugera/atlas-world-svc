# Nakama Server Development Rules

## Project Structure
- **TypeScript modules** go in `modules/ts/src/`
- **Compiled JavaScript** goes in `modules/ts/build/` (generated by `tsc`)
- **Main entry point** is `modules/ts/src/index.ts` → `modules/ts/build/index.js`
- **Docker Compose** orchestrates all services in `docker-compose.yml`
- **Nakama config** is in `nakama-game-server-config.yml`

## TypeScript Development
- Use `pnpm` as package manager (specified in `package.json`)
- Build with `pnpm run build` (runs `tsc`)
- Watch mode with `pnpm run dev` (runs `tsc --watch`)
- **Never edit files in `build/` directory** - always edit `src/` files
- Use `module: "None"` in `tsconfig.json` for Nakama compatibility
- Prefix unused parameters with `_` to avoid TypeScript errors

## Nakama Runtime Requirements
- **InitModule function** must be defined globally (not exported)
- **Match handlers** must be registered via `initializer.registerMatch()`
- **RPC functions** must be registered via `initializer.registerRpc()`
- **No imports/exports** - all functions must be global
- **No CommonJS modules** - Nakama expects plain JavaScript

## Docker Development
- **Always use `docker-compose`** for local development
- **Never use Testcontainers** - unreliable and slow
- **Check server status** with `docker-compose ps`
- **View logs** with `docker-compose logs atlas-server`
- **Restart server** with `docker-compose restart atlas-server`

## Testing Strategy
- **Unit tests** for pure logic functions (movement, calculations)
- **RPC integration tests** for HTTP functionality
- **WebSocket integration tests** for real-time features
- **Use `pnpm test`** to run all tests
- **Use `pnpm run test:integration:rpc`** for RPC tests
- **Use `pnpm run test:integration:websocket`** for WebSocket tests

## Common Issues & Solutions
- **Server crashes on startup** → Check TypeScript compilation errors
- **"InitModule not found"** → Ensure InitModule is defined globally
- **"Match handler not found"** → Ensure match handlers are registered
- **WebSocket tests timeout** → Implement match handlers for WebSocket messages
- **RPC tests fail** → Check server is running and RPCs are registered

## Development Workflow
1. Edit TypeScript files in `src/`
2. Run `pnpm run build` to compile
3. Run `docker-compose restart atlas-server` to reload
4. Check logs with `docker-compose logs atlas-server`
5. Run tests with `pnpm test`

## File Naming Conventions
- **Match handlers** → `atlasMovementMatch*` functions
- **RPC functions** → `*Rpc` suffix
- **Test files** → `*.test.ts` or `*.int.test.ts`
- **Integration tests** → `*.int.test.ts`
- **Unit tests** → `*.test.ts`

## Database Configuration
- **CockroachDB** is used (not PostgreSQL)
- **Connection string** format: `atlas-database:26257`
- **User**: `root`, **Password**: `""` (empty)
- **Database name**: `nakama`

## Environment Variables
- **DATABASE_HOST**: `atlas-database`
- **DATABASE_PORT**: `26257`
- **RUNTIME_PATH**: `/nakama/modules`
- **LOG_LEVEL**: `DEBUG`
- **CONSOLE_USER**: `admin`
- **CONSOLE_PASS**: `p@ssw0rd1234`

## Ports
- **Nakama Server**: `7349` (WebSocket), `7350` (HTTP)
- **Nakama Console**: `7351` (HTTPS)
- **CockroachDB**: `26257`
- **Prometheus**: `9091`
- **Grafana**: `3000`

## Best Practices
- **Keep match handlers simple** initially, add complexity gradually
- **Test WebSocket functionality** with real match handlers
- **Use proper TypeScript types** for better development experience
- **Log important events** for debugging
- **Handle errors gracefully** in match handlers
- **Use consistent naming** for functions and variables