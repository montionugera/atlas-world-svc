## ðŸ’» Coding Standards

### TypeScript Configuration
- **Target**: ES2020
- **Module**: CommonJS (Nakama requirement)
- **Strict**: All strict checks enabled
- **No implicit**: any, returns, this

### Naming Conventions
- **Classes**: PascalCase (MatchHandler, PhysicsWorld)
- **Interfaces**: PascalCase with I prefix (IPlayerState)
- **Methods**: camelCase (processInput, updatePhysics)
- **Constants**: UPPER_SNAKE_CASE (TICK_RATE_HZ)
- **Files**: kebab-case (match-handler.ts)

### Architecture Patterns
- **SOLID principles**: Single responsibility, open/closed
- **Composition over inheritance**
- **Dependency injection** for testability
- **Observer pattern** for events

### Error Handling
- **Never swallow errors** without logging
- **Use custom error types** for different failure modes
- **Graceful degradation** when possible
- **Structured logging** with context

### Performance Guidelines
- **Object pooling** for frequently created objects
- **Avoid heap allocations** in hot paths
- **Use typed arrays** for numeric data
- **Minimize closure captures** in loops

### Memory Management
- **Explicit cleanup** of resources
- **Reference counting** for shared objects
- **Garbage collection monitoring**
- **Memory leak detection** in tests

### Security Principles
- **Input validation** on all client data
- **Sanity checks** on movement/positions
- **Rate limiting** per client
- **Audit logging** for sensitive operations