## 📁 Project Structure Rules

### Root Layout
```
atlas-world-svc/
├── .cursor/
│   ├── plans/           # Implementation plans
│   └── rules/           # Development rules
├── colyseus-server/
│   ├── src/
│   │   ├── index.ts     # Server entry point
│   │   ├── rooms/       # Game room handlers
│   │   ├── schemas/     # Colyseus schemas
│   │   └── types/       # TypeScript types
│   ├── generated/csharp/ # C# Unity client
│   ├── docs/            # API documentation
│   ├── tests/           # Test files
│   ├── package.json
│   ├── tsconfig.json
│   └── Dockerfile
├── client/
│   └── react-client/    # React WebSocket client
├── docker-compose.yml
└── README.md
```

### Colyseus Server Organization
- **rooms/**: Game room handlers and logic
- **schemas/**: Colyseus state schemas (Player, Mob, GameState)
- **types/**: Shared TypeScript interfaces
- **index.ts**: Server configuration and startup
- **generated/csharp/**: C# Unity client library
- **docs/**: API documentation (HTML, AsyncAPI)

### React Client Organization
- **components/**: React UI components
- **hooks/**: Custom React hooks (useColyseusClient)
- **types/**: Client-side TypeScript types
- **utils/**: Helper functions and utilities

### File Naming
- **Handlers**: `{feature}Handler.ts`
- **Managers**: `{feature}Manager.ts`
- **Systems**: `{feature}System.ts`
- **Utils**: `{feature}Utils.ts`
- **Types**: `{feature}Types.ts`

### Import Structure
- **Relative imports** within modules
- **Absolute imports** from index files
- **Barrel exports** for clean APIs
- **No circular dependencies**

### Configuration Management
- **Environment variables** for secrets
- **Static config** files for game constants
- **Runtime config** validation
- **Hot reload** support for development